# print("hello world !")

# Lecture 3:

# Run a for loop in a list to find a specific in it:
# list = []

# for i in range(1, 8):
#     list.append(i)
# print(list)

# for i in list:
#     if i ==7:
#         print(i)
#         break
#     else:
#         pass

# def print_items(n):
#     for i in range(n):
#         print(i)

#     for j in range(n):
#         print(j)

# print_items(10)

# def print_items(n):
#     i = 0
#     while i < n:
#         print(i)
#         i += 1


# def print_items(n):

#     for i in list(range(n)):
#         print(i)
# print_items(10)


# Big O : O(n^2)

# def print_items(n):
#     for i in range(n):
#         for j in range(n):
#             print(i, j)

    
# print_items(10)

# Big O : Drop Non - Dominant

def print_items(n):
    for i in range(n):
        for j in range(n):
            print(i, j)

    for k in range(n):
        print(k)

# print_items(10)

#Big O : O(1)

def add_items(n):
    return n + n   #As n increases , the number of operations remain constant (k) - It's the most efficient way of writing code (optimal)

# print(add_items(100))


#Big O : Different Terms for inputs 

def print_items(n):
    for i in range(n):
        print(i)
    
    for j in range(n):
        print(j)

# print_items(10)

def print_items(a, b):
    for i in range(a):
        print(i)

    for j in range(b):  #O(a + b) 
        print(j)

# print_items(10, 20)

def print_items(a, b):
    for i in range(a):
        for j in range(b):
            print(i, j)    #O(a * b)

# print_items(10, 12)


#Big O: O of lists

my_list = [11, 3, 23, 7, 6]


# my_list.append(17)

# my_list.pop()   # O(1)

# my_list.pop(0) #O(n)

# my_list.insert(0,11)

my_list.insert(1, "HI")

# print(my_list)


# Section 3 : Classes & Pointers : Classes 

class Cookie:
    def __init__(self, color):
        self.color = color

    def get_color(self):
        return self.color
    
    def change_color(self, new_color):
        self.color = new_color

cookie_one = Cookie("Green")
cookie_two = Cookie("Blue")

# print('The color of cookie One is', cookie_one.get_color())

# print('The color of cookie Two is', cookie_two.get_color())

cookie_one.change_color("Yellow")

# print('The color of cookie One is now', cookie_one.get_color())

# print('The color of cookie Two is still', cookie_two.get_color())



# Section 3 : Classes & Pointers :Pointers

# num1 = 11
# num2 = num1

# print("Before num2 value is updated : ")
# print("The value of num1 = ", num1)
# print("The value of num2 = ", num2)

# print("num1 points to : ", id(num1)) #id() will reveal the positon/address of the data type in the memory
# print("num2 points to : ", id(num2))

# num2 = 22

# print("After num2 value is updated : ")
# print("The value of num1 = ", num1)
# print("The value of num2 = ", num2)

# print("num1 points to : ", id(num1)) 
# print("num2 points to : ", id(num2))


# dict1 = {
#     "value": 11
# }

# dict2 = dict1

# print("Before dict2 is updated: ")
# print("dict1 =  ", dict1)
# print("dict2 = ", dict2)

# print("dict1 points at : ", id(dict1))
# print("dict2 points at : ", id(dict2))

# dict2["value"] = 22
# print()

# print("After dict2 is updated: ")
# print("dict1 =  ", dict1)
# print("dict2 = ", dict2)

# print("dict1 points at : ", id(dict1))
# print("dict2 points at : ", id(dict2))


head = {
    "value" : 11,
    "next" : {
        "value": 3, 
        "next": {
            "value" : 23,
            "next" : {
                "value" : 7,
                "next" : {
                    "value" : 4,
                    "next" : None
                }
            }
        }
    }
}

# print(head["next"]["next"]["value"])   #How does this code is working ?

#This will only work with a linked list 
# print(my_linkedlist.head.next.next.value)


#Linked Lists : Constructor 

class Node():
    def __init__(self, value):
        self.value = value
        self.next = None

class LinkedList:
    def __init__(self, value):
        new_node = Node(value)
        self.head = new_node
        self.tail = new_node
        self.length = 1

    # def append(self, value):   # Why this is not the right way to write this method?
    #     append_node = Node(value)
    #     self.head = append_node
    #     self.tail = append_node
    #     self.length += 1

    def append(self, value):
        new_node = Node(value)
        
        if self.head == None:
            self.head = new_node
            self.tail = new_node

        else:
            self.tail.next = new_node
            self.tail = new_node
        
        self.length += 1
        return True

    def print_list(self):
        temp = self.head
        while temp != None:
            print(temp.value)
            temp = temp.next

    def pop(self,value):
        
        if self.length == 0:
            pass
        
        elif self.length == 1:
            self.tail = None
            self.head = None



my_linked_list = LinkedList(1)
# my_linked_list.append(2)
my_linked_list.pop(1)
my_linked_list.print_list()



